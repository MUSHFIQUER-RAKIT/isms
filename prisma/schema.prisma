// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Define role enum
enum Role {
  EMPLOYEE
  OWNER
}


model Customer {
  id              Int           @id @default(autoincrement())
  name            String
  email           String?       @unique
  phone           String
  address         String?
  region          String        // e.g. Dhaka, Chittagong
  institutionType String        // e.g. School, Hospital, Corporate
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  outreachRecords Outreach[]
}
model Employee {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?  @unique
  password  String
  employeeId  String   @unique
  designation String?
  phone       String?
  role        Role     @default(EMPLOYEE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  outreachRecords Outreach[]
  comments        Comment[]
}
model Product {
  id        Int      @id @default(autoincrement())
  type      String
  quantity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation: A product can be linked to outreach record
  outreachRecords Outreach[]
}
model Outreach {
  id             Int       @id @default(autoincrement())
  customerId     Int
  employeeId     Int
  productId      Int?
  initialStatus  String     // e.g. Pending, Contacted, Not Interested
  deliveryStatus String?    // e.g. Delivered, Pending
  followUpDate   DateTime?  // when to follow up with customer
  note           String?    // extra notes (employee remarks, customer context, etc.)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])
  product  Product? @relation(fields: [productId], references: [id])
  comments Comment[]
}


model Comment {
  id         Int      @id @default(autoincrement())
  outreachId Int
  employeeId Int?
  adminComment String?
  text       String?   // Employee’s or Admin’s note
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  outreach Outreach @relation(fields: [outreachId], references: [id])
  employee Employee? @relation(fields: [employeeId], references: [id])
}